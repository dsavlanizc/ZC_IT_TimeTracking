//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZC_IT_TimeTracking
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DatabaseEntities : DbContext
    {
        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Goal_Master> Goal_Master { get; set; }
        public virtual DbSet<Goal_Quater> Goal_Quater { get; set; }
        public virtual DbSet<Goal_Rules> Goal_Rules { get; set; }
        public virtual DbSet<Manager> Managers { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<Resource_Goal> Resource_Goal { get; set; }
        public virtual DbSet<Resource_Goal_Performance> Resource_Goal_Performance { get; set; }
        public virtual DbSet<Resource_Performance> Resource_Performance { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamLead> TeamLeads { get; set; }
    
        public virtual ObjectResult<CheckQuater_Result> CheckQuater(Nullable<int> quater, Nullable<int> qYear)
        {
            var quaterParameter = quater.HasValue ?
                new ObjectParameter("Quater", quater) :
                new ObjectParameter("Quater", typeof(int));
    
            var qYearParameter = qYear.HasValue ?
                new ObjectParameter("QYear", qYear) :
                new ObjectParameter("QYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckQuater_Result>("CheckQuater", quaterParameter, qYearParameter);
        }
    
        public virtual int DeleteGoalMaster(Nullable<int> goalId)
        {
            var goalIdParameter = goalId.HasValue ?
                new ObjectParameter("GoalId", goalId) :
                new ObjectParameter("GoalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGoalMaster", goalIdParameter);
        }
    
        public virtual int DeleteGoalRule(Nullable<int> goalRuleId)
        {
            var goalRuleIdParameter = goalRuleId.HasValue ?
                new ObjectParameter("GoalRuleId", goalRuleId) :
                new ObjectParameter("GoalRuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGoalRule", goalRuleIdParameter);
        }
    
        public virtual ObjectResult<GetGoalDetails_Result> GetGoalDetails(Nullable<int> goal_Id)
        {
            var goal_IdParameter = goal_Id.HasValue ?
                new ObjectParameter("Goal_Id", goal_Id) :
                new ObjectParameter("Goal_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGoalDetails_Result>("GetGoalDetails", goal_IdParameter);
        }
    
        public virtual ObjectResult<GetGoalRuleDetails_Result> GetGoalRuleDetails(Nullable<int> goalId)
        {
            var goalIdParameter = goalId.HasValue ?
                new ObjectParameter("GoalId", goalId) :
                new ObjectParameter("GoalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGoalRuleDetails_Result>("GetGoalRuleDetails", goalIdParameter);
        }
    
        public virtual ObjectResult<GetQuaterDetails_Result> GetQuaterDetails(Nullable<int> quaterId)
        {
            var quaterIdParameter = quaterId.HasValue ?
                new ObjectParameter("QuaterId", quaterId) :
                new ObjectParameter("QuaterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuaterDetails_Result>("GetQuaterDetails", quaterIdParameter);
        }
    
        public virtual int InsertGoalMaster(string goal_Title, string goal_Description, string unit_Of_Measurement, Nullable<double> measurement_Value, Nullable<bool> is_HigherValueGood, Nullable<System.DateTime> creationDate, Nullable<int> quaterID, ObjectParameter currentInsertedId)
        {
            var goal_TitleParameter = goal_Title != null ?
                new ObjectParameter("Goal_Title", goal_Title) :
                new ObjectParameter("Goal_Title", typeof(string));
    
            var goal_DescriptionParameter = goal_Description != null ?
                new ObjectParameter("Goal_Description", goal_Description) :
                new ObjectParameter("Goal_Description", typeof(string));
    
            var unit_Of_MeasurementParameter = unit_Of_Measurement != null ?
                new ObjectParameter("Unit_Of_Measurement", unit_Of_Measurement) :
                new ObjectParameter("Unit_Of_Measurement", typeof(string));
    
            var measurement_ValueParameter = measurement_Value.HasValue ?
                new ObjectParameter("Measurement_Value", measurement_Value) :
                new ObjectParameter("Measurement_Value", typeof(double));
    
            var is_HigherValueGoodParameter = is_HigherValueGood.HasValue ?
                new ObjectParameter("Is_HigherValueGood", is_HigherValueGood) :
                new ObjectParameter("Is_HigherValueGood", typeof(bool));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var quaterIDParameter = quaterID.HasValue ?
                new ObjectParameter("QuaterID", quaterID) :
                new ObjectParameter("QuaterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGoalMaster", goal_TitleParameter, goal_DescriptionParameter, unit_Of_MeasurementParameter, measurement_ValueParameter, is_HigherValueGoodParameter, creationDateParameter, quaterIDParameter, currentInsertedId);
        }
    
        public virtual int InsertGoalQuater(Nullable<int> quater, Nullable<int> year, Nullable<System.DateTime> goalCreate_From, Nullable<System.DateTime> goalCreate_To)
        {
            var quaterParameter = quater.HasValue ?
                new ObjectParameter("Quater", quater) :
                new ObjectParameter("Quater", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var goalCreate_FromParameter = goalCreate_From.HasValue ?
                new ObjectParameter("GoalCreate_From", goalCreate_From) :
                new ObjectParameter("GoalCreate_From", typeof(System.DateTime));
    
            var goalCreate_ToParameter = goalCreate_To.HasValue ?
                new ObjectParameter("GoalCreate_To", goalCreate_To) :
                new ObjectParameter("GoalCreate_To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGoalQuater", quaterParameter, yearParameter, goalCreate_FromParameter, goalCreate_ToParameter);
        }
    
        public virtual int InsertGoalRules(Nullable<int> performanceRangeFrom, Nullable<int> performanceRangeTo, Nullable<double> rating, Nullable<int> goalID)
        {
            var performanceRangeFromParameter = performanceRangeFrom.HasValue ?
                new ObjectParameter("PerformanceRangeFrom", performanceRangeFrom) :
                new ObjectParameter("PerformanceRangeFrom", typeof(int));
    
            var performanceRangeToParameter = performanceRangeTo.HasValue ?
                new ObjectParameter("PerformanceRangeTo", performanceRangeTo) :
                new ObjectParameter("PerformanceRangeTo", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(double));
    
            var goalIDParameter = goalID.HasValue ?
                new ObjectParameter("GoalID", goalID) :
                new ObjectParameter("GoalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGoalRules", performanceRangeFromParameter, performanceRangeToParameter, ratingParameter, goalIDParameter);
        }
    
        public virtual int UpdateGoalMaster(Nullable<int> goal_Id, string goal_Title, string goal_Description, string unit_Of_Measurement, Nullable<double> measurement_Value, Nullable<System.DateTime> createDate, Nullable<bool> is_HigherValueGood, Nullable<int> quaterID)
        {
            var goal_IdParameter = goal_Id.HasValue ?
                new ObjectParameter("Goal_Id", goal_Id) :
                new ObjectParameter("Goal_Id", typeof(int));
    
            var goal_TitleParameter = goal_Title != null ?
                new ObjectParameter("Goal_Title", goal_Title) :
                new ObjectParameter("Goal_Title", typeof(string));
    
            var goal_DescriptionParameter = goal_Description != null ?
                new ObjectParameter("Goal_Description", goal_Description) :
                new ObjectParameter("Goal_Description", typeof(string));
    
            var unit_Of_MeasurementParameter = unit_Of_Measurement != null ?
                new ObjectParameter("Unit_Of_Measurement", unit_Of_Measurement) :
                new ObjectParameter("Unit_Of_Measurement", typeof(string));
    
            var measurement_ValueParameter = measurement_Value.HasValue ?
                new ObjectParameter("Measurement_Value", measurement_Value) :
                new ObjectParameter("Measurement_Value", typeof(double));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var is_HigherValueGoodParameter = is_HigherValueGood.HasValue ?
                new ObjectParameter("Is_HigherValueGood", is_HigherValueGood) :
                new ObjectParameter("Is_HigherValueGood", typeof(bool));
    
            var quaterIDParameter = quaterID.HasValue ?
                new ObjectParameter("QuaterID", quaterID) :
                new ObjectParameter("QuaterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGoalMaster", goal_IdParameter, goal_TitleParameter, goal_DescriptionParameter, unit_Of_MeasurementParameter, measurement_ValueParameter, createDateParameter, is_HigherValueGoodParameter, quaterIDParameter);
        }
    
        public virtual int UpdateGoalRules(Nullable<int> performanceRangeFrom, Nullable<int> performanceRangeTo, Nullable<double> rating, Nullable<int> goalID)
        {
            var performanceRangeFromParameter = performanceRangeFrom.HasValue ?
                new ObjectParameter("PerformanceRangeFrom", performanceRangeFrom) :
                new ObjectParameter("PerformanceRangeFrom", typeof(int));
    
            var performanceRangeToParameter = performanceRangeTo.HasValue ?
                new ObjectParameter("PerformanceRangeTo", performanceRangeTo) :
                new ObjectParameter("PerformanceRangeTo", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(double));
    
            var goalIDParameter = goalID.HasValue ?
                new ObjectParameter("GoalID", goalID) :
                new ObjectParameter("GoalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGoalRules", performanceRangeFromParameter, performanceRangeToParameter, ratingParameter, goalIDParameter);
        }
    
        public virtual ObjectResult<GetGoalDetailsWithPagination_Result> GetGoalDetailsWithPagination(Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGoalDetailsWithPagination_Result>("GetGoalDetailsWithPagination", pageNoParameter, pageSizeParameter);
        }
    }
}
